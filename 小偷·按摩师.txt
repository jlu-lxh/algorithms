<!--
    leetcode小偷问题或者按摩师问题。即不相邻的最大子序列和。
    我们考虑第i天的结果。这一天有两种可能：选或者不选。创建二维数组dp[i][]，记0为不选择，1为选择；
    第i天选择了，那么前一天就不能选择，dp[i][1]=dp[i-1][0]+num_i;
    第i天选择了，其最大值为前一天不选情况下的最大值加上当天的值；
    第i天未选择，那么前一天可以选也可以不选，这个时候就要比较前一天选和不选的最大值是多少；
    dp[i][0]=Math.max(dp[i-1][0],dp[i-1][1]);
    这样子我们可以发现，每一天的选择都可以通过前一天计算出来，我们设置dp[0][0]和dp[0][1]为已知初值。
    这样子每天的已累计最大值就可以由以上计算出来。
    for循环以此计算每天的最大值，最后返回max。
-->
package test_501;

import org.omg.CORBA.PUBLIC_MEMBER;

public class stealer {
     public static int find_max_time(int[] a){
    	 if(a==null){return 0;}
    	 if(a.length==1){ return a[0];}
    	 int[][] dp = new int[a.length][2];
    	  dp[0][0]=0; dp[0][1]=a[0];    //a为数组，初始化第一天的值
    	 
         for(int i=1;i<=a.length-1;i++){
    	     dp[i][1]=dp[i-1][0]+a[i];
             dp[i][0]=Math.max(dp[i-1][0], dp[i-1][1]);    //从第二天开始循环依次计算每天的最大值。
    	 } 
    	  
    	 
    	  return Math.max(dp[a.length-1][1], dp[a.length-1][0]);  //返回最后一天的max
     }
    
	
	 public static void main(String [] agrs){
	  int [] a ={2,1,4,5,3,1,1,3};
		 System.out.print(find_max_time(a));
	 }

}
