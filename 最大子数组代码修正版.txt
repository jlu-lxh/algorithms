<!--
  昨天的代码尝试了几个测试用例之后就提交了，没想到在leetcode上测试不通过，还是因为没考虑边界情况。
  草草就上传了代码，大意了啊。
-->

package test_501;

import java.util.Scanner;

public class test {
  public int[] a ={-2,1,-3,4,-1,2,1,-5,4};
  public static int findMaxSubarray(int[] a){
	  if(a.length==0||a==null)
		  return 0;
	  return findMaxSubarray(a,0,a.length-1);
	  
  }
    
    public static int findMaxSubarray(int[] a,int l,int r){
    	if(l>=r){
    		return a[l];
    	}
    	
    	int mid = (int)((r+l)/2);
    	//System.out.print("mid is"+mid);
    	//System.out.print((int)(1/2));
    	int left_max = Integer.MIN_VALUE;
    	int left_sum =  0;
   // 	boolean left_target = false;
    	for(int i =mid ; i>=l;i--){
    	//	left_target=true;
    		left_sum = left_sum+a[i];
    		left_max = Math.max(left_max,left_sum);
    	}
    	
    	
       int right_max = Integer.MIN_VALUE;
       int right_sum = 0;
    //   boolean right_target= false;
       for(int i = mid+1;i<=a.length-1;i++){
    	//   right_target=true;
    	   right_sum = right_sum+a[i];
    	   right_max = Math.max(right_max, right_sum);
       }
     /*  if(left_target==false)
    	   {left_max=0;
    	   }
       if(right_target==true)
       { right_max =0;
         System.out.print("right equals zero");}
       System.out.print("findMaxSubarray(a,l,mid)"+findMaxSubarray(a,l,mid));
       System.out.print("findMaxSubarray(a,mid+1,r)"+findMaxSubarray(a,mid+1,r));*/
       return Math.max(left_max+right_max, Math.max(findMaxSubarray(a,l,mid),findMaxSubarray(a, mid+1, r)));
    	
    	
    }
	
	public static void main(String []args){
		int[]a = { -1, -2147483648, 1} ;
		 System.out.print(findMaxSubarray(a));
	}
}
